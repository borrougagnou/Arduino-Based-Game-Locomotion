/*
  Author: GulJanjua
  Date  : December 22, 2019

  Software Requirements:
  ----------------------
  -Arduino IDE 1.0

  Hardware Requirements:
  ----------------------
  -Arduino
  -Pressure sensors
  -Gyroscope
  -Servo motors

  Project Requirents:
  -------------------
  • Game pad controller

*/

#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>

#define SensorV 15

#define angle1 20
#define angle2 90

#define Sensor_BL A0
#define Sensor_BR A1
#define Sensor_SL A2
#define Sensor_SR A3

Adafruit_BNO055 bno1 = Adafruit_BNO055(-1, 0x28);
Adafruit_BNO055 bno2 = Adafruit_BNO055(-1, 0x29);

int16_t padX = 0;
int16_t padY = 0;

int speed = 0;
int angle = 0;

int y1_axis = 0, y2_axis = 0;
int y1_last = 0, y2_last = 0;
int y1_thres = 0, y2_thres = 0;
int sensorBL;
int sensorBR;
int sensorSL;
int sensorSR;

int prev_y1_axis = 0;
int y1_hold = 0;
unsigned long timer;
int start = 0;
byte step = 0;
String steps ,  laststep;
int freq;
int runC;

void setup() {
  Serial.begin(115200);
  Serial1.begin(9600);

  if (!bno1.begin())
  {
    Serial.print("Ooops, no BNO055 1 detected ... Check your wiring or I2C ADDR!");
    while (1);
  }

  delay(1000);

  if (!bno2.begin())
  {
    Serial.print("Ooops, no BNO055 1 detected ... Check your wiring or I2C ADDR!");
    while (1);
  }
  delay(1000);
  bno1.setExtCrystalUse(true);
  bno2.setExtCrystalUse(true);
  delay(100);

  unsigned long timer;
  Serial.println("Calibration...");
  while (millis() - timer < 10000) {
    imu::Vector<3> euler1 = bno1.getVector(Adafruit_BNO055::VECTOR_EULER);
    imu::Vector<3> euler2 = bno2.getVector(Adafruit_BNO055::VECTOR_EULER);

    y1_thres = euler1.z();
    y2_thres = euler2.z();
    Serial.print(".");
    delay(100);
  }
  Serial.println("\nDone");
  Serial.println(String(y1_thres) + " " + String(y2_thres));
  delay(3000);
}

void loop() {
  imu::Vector<3> euler1 = bno1.getVector(Adafruit_BNO055::VECTOR_EULER);
  imu::Vector<3> euler2 = bno2.getVector(Adafruit_BNO055::VECTOR_EULER);

  y1_axis = euler1.z();
  y2_axis = euler2.z();

  sensorBL = analogRead(Sensor_BL);
  sensorBR = analogRead(Sensor_BR);

  sensorSL = analogRead(Sensor_SL);
  sensorSR = analogRead(Sensor_SR);

  if (sensorSL > 10) {
    speed = map( sensorSL , 0 , 1023 , 0 , 255);
    if (sensorSL < 700) {
      padX = 10000; 
    }
    else {
      padX = 32767; 
    }

  }
  else if (sensorSR > 10) {
    if (sensorSR < 700) {
      padX = -10000; 
    }
    else {
            padX = -32767;   
    }
  }
  else {
          padX = 0;   
  }

  if (sensorBL > 200) {
    speed = map( sensorBL , 0 , 1023 , 0 , 255);
    if (sensorBL < 600) { //less pressure 90+20=110
      //servo.write(95 , speed);
      // Here value for pressure sensor set this -777 and -30000 values
      padY = -10000; //here
      angle = -110;
    }
    else if (sensorBL > 600) { //more pressre 90+90 = 180
      //servo.write(105 , speed);
      padY = -32767; //here
      angle = -127;
    }
  }
  else if (sensorBR > 200) {
    speed = map( sensorBR , 0 , 1023 , 0 , 255);
    if (sensorBR < 600) {
      padY = -32767; //here
      angle = -110;
    }
    else if  (sensorBR > 600) {
      padY = -10000; //here
      angle = -127;
    }
  }
  else if ((start == 0 || millis() - timer > 800) && y1_axis > y1_thres - SensorV && y1_axis < y1_thres + SensorV && y2_axis > y2_thres - SensorV && y2_axis < y2_thres + SensorV && sensorBL < 200 && sensorBR < 200) //flat dead end no servo movement - center position -  can we separate on different lines the pressure sensor and accell so that I can set the dead end value separately for the press sens and acc ?
  {
    if (angle == 70 && runC > 0) {
      angle = 110;
      padY = 32767; //here
      runC--;
    }
    else {
      padY = 0; //here
      start = 1;
      angle = 0;
    }
    //Serial.println("Servo goes to zero");
    step = 0;
    steps = "0";
  }
  else if ((y1_axis > y1_thres + SensorV || y1_axis < y1_thres - SensorV) && (step == 0 || step == 2))
  {
    step = 1;
    steps = "1";
  }
  else if ((y2_axis > y2_thres + SensorV || y2_axis < y2_thres - SensorV) && (step == 0 || step == 1))
  {
    step = 2;
    steps = "2";
  }

  if (!steps.equals(laststep)) {
    if ((step == 1 || step == 2)  &&  millis() - timer < 400) {
      if (freq > 1) {
        padY = 32767; //here
        angle = 110;
      }
      else {
        padY = 10000; //here
        angle = 127;
      }
      freq++;
      runC = 1;
    }
    else if ((step == 1 || step == 2 &&  millis() - timer > 500)) {
      padY = 10000; //here
      angle = 127;
      freq = 0;
    }
    timer = millis();
  }
  //Serial.println("Y1: " + String(y1_axis) + " Y2: " + String(y2_axis) + " S1: " + String(sensorBL) + " S2: " + String(sensorBR) + " Millis: " + String(millis() - timer) + " Step: " + String(steps) + " Last: " + String(laststep) + " Angle: " + String(angle));
  //Serial.println("Millis: " + String(millis() - timer) + " Angle: " + String(angle));
  Serial.println("Y1: " + String(y1_axis) + " Y2: " + String(y2_axis) + " S1: " + String(sensorBL) + " S2: " + String(sensorBR) + " padX: " + String(padX) + " padY: " + String(padY));

  
  
  //Serial.print(String(padX) + "," + String(padY));
  //Serial.println(" S1: " + String(sensorSL) + " S2: " + String(sensorSR));

  laststep = steps;
  Serial1.println(String(padX) + "," + String(padY));
  delay(100);
}
